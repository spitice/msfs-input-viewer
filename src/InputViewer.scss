
@use "sass:selector";
@use "./styles/utils" as *;

@function scaledWidget($px) {
    @return calc(var(--widgetScale) * #{$px});
}

@mixin externalized() {
    @at-root body.extern & {
        @content;
    }
}
@mixin panelsToShow($value) {
    @at-root #InputViewer[data-panels=#{$value}] & {
        @content;
    }
}
@mixin throttlePanelMode($mode) {
    @at-root #InputViewer[data-throttle-panel-mode=#{$mode}] & {
        @content;
    }
}
@mixin numberDisplayType($type) {
    @at-root #InputViewer[data-number-display-type=#{$type}] & {
        @content;
    }
}
@mixin panelsAndNumberDisplayType($panels, $numberDisplayType) {
    @at-root #InputViewer[data-panels=#{$panels}][data-number-display-type=#{$numberDisplayType}] & {
        @content;
    }
}
@mixin forHelicopter() {
    @at-root #InputViewer[data-category="helicopter"] & {
        @content;
    }
}

@mixin fill {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow: hidden;
}


html, body {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
*, *:before, *:after {
    box-sizing: inherit;
}

#InputViewer_UIFrame {
    z-index: 0;
    height: 100vh !important;

    > ingame-ui-header {
        z-index: -1;
        position: relative;

        transition: opacity var(--animationTimeFast) var(--animationEffect);
    }

    > ui-element {
        z-index: -2;
        position: relative;
    }

    #InputViewer_UIFrame .ingameUiWrapper {
        position: relative;
    }
}

#InputViewer {
    --widgetScale: 1px;  // placeholder

    --headerHeight: #{scaled(84)};
    --margin: #{scaled(6)};

    --wrapperWidth: calc(100vw - var(--margin) * 2);

    --wrapperHeightWithoutHeader: calc(100vh - var(--margin) * 2);
    --wrapperHeightWithHeader: calc(var(--wrapperHeightWithoutHeader) - var(--headerHeight) - var(--margin));

    --wrapperHeight: var(--wrapperHeightWithHeader);
    --wrapperOffsetY: 0px;

    @include externalized() {
        --wrapperHeight: var(--wrapperHeightWithoutHeader);
    }
    &[data-auto-hide-header=true] {
        --wrapperHeight: var(--wrapperHeightWithoutHeader);

        @at-root body:not(.extern) & {
            --wrapperOffsetY: calc(0px - var(--headerHeight) - var(--margin));
        }

        ingame-ui-header {
            opacity: 0;
            transition-delay: 0.2s;
        }
        ingame-ui.minimized {
            ingame-ui-header {
                opacity: 1;  // When minimized, the header should always be visible
            }
        }
        @at-root #{selector.unify(&, "#InputViewer[data-config-opened=true]")} {
            ingame-ui-header {
                opacity: 1;  // While the config panel is opened, the header should always be visible
            }
        }
        @at-root body:hover & {
            ingame-ui-header {
                opacity: 1;
                transition-delay: 0.0s;
            }
        }
    }

    #Wrapper {
        --panelGridWidth: var(--wrapperWidth);
        --panelGridHeight: var(--wrapperHeight);

        --popupWidth: var(--wrapperWidth);
        --popupHeight: calc(var(--wrapperHeight) + var(--wrapperOffsetY));

        width: var(--wrapperWidth);
        height: var(--wrapperHeight);
        top: var(--wrapperOffsetY);

        #PanelGrid {
            width: var(--panelGridWidth);
            height: var(--panelGridHeight);

            --leftWidgetWidth: #{scaledWidget(60)};
            --rightWidgetWidth: #{scaledWidget(220)};
            --topWidgetHeight: #{scaledWidget(220)};
            --bottomWidgetHeight: #{scaledWidget(40)};
        }
        #PanelOverlay {
            width: var(--panelGridWidth);
            height: var(--panelGridHeight);
        }
        #Popup {
            width: var(--popupWidth);
            height: var(--popupHeight);
            top: calc(0px - var(--wrapperOffsetY));
        }
    }
}

#Wrapper {
    position: absolute;
    z-index: 0;

    #PanelGrid {
        position: absolute;
        z-index: 1;
    }
    #PanelOverlay {
        position: absolute;
        z-index: 2;
        pointer-events: none;
    }
    #Popup {
        position: absolute;
        z-index: 3;
        pointer-events: none;
    }
}

#Wrapper {
    #PanelGrid {
        display: grid;
        grid-template-columns: var(--leftWidgetWidth) var(--rightWidgetWidth);
        grid-template-rows: var(--topWidgetHeight) var(--bottomWidgetHeight);
        grid-template-areas:
            "throttle stick"
            "misc rudder";
        justify-content: space-evenly;  // x-axis
        align-content: center;          // y-axis

        background-color: rgba(0, 0, 0, 0.1);

        #StickPanel {
            grid-area: stick;
        }
        #RudderPanel {
            grid-area: rudder;
        }
        #ThrottlePanel {
            grid-area: throttle;
        }
        #MiscPanel {
            grid-area: misc;
        }

        #StickPanel #NumberDisp_Simple_Container > svg.throttleContainer {
            left: #{scaledWidget(15)};
        }

        @include panelsToShow("throttle") {
            grid-template-columns: var(--leftWidgetWidth);
            grid-template-areas:
                "throttle"
                "misc";

            #StickPanel,
            #RudderPanel {
                display: none;
            }
        }

        @include panelsAndNumberDisplayType("throttle", "simple") {
            grid-template-columns: var(--leftWidgetWidth) #{scaledWidget(60)};
            grid-template-areas:
                "throttle stick"
                "misc misc";

            #StickPanel {
                display: inline;

                > svg,
                #NumberDisp_Simple_Container > svg {
                    display: none;
                }
                #NumberDisp_Simple_Container > svg.throttleContainer {
                    display: inline;
                    left: 0;
                }
            }
        }
    }
}

#DevOverlay {
    @include fill();
    z-index: 999;
    pointer-events: none;

    > .error {
        background-color: crimson;
    }
}

#ConfigPopup_Container {
    @include fill();
    z-index: 100;

    pointer-events: auto;

    background-color: rgba(0, 0, 0, 0.7);

    display: flex;
    flex-direction: column;

    @at-root #InputViewer:not([data-config-opened=true]) & {
        display: none;
    }

    font-weight: bold;

    #Config_ScrollCont {
        flex: 1 1 auto;
    }

    new-list-button {
        // Make it slightly slim
        --optionContentWidth: #{scaled(350)};  // 500 for .condensedPanel, 700 for default
    }

    .sectionTitle {
        padding: scaled(16) scaled(16) scaled(8);

        font-weight: normal;

        &:not(:first-child) {
            margin-top: scaled(16);
        }
    }

    .info {
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        background-color: var(--backgroundColorPanel);

        $size: 96;

        & > .icon {
            flex: 0 0 scaled($size);

            display: flex;
            flex-direction: row;
            align-items: center;

            background-color: var(--backgroundColorPanel);

            icon-element {
                --width: #{scaled($size)};
                --height: #{scaled($size)};
            }
        }

        & > .description {
            display: flex;
            justify-content: flex-start;
            align-items: center;

            overflow: hidden;
            padding: scaled(12);

            font-weight: normal;
        }
    }

    #Config_Close {
        margin: var(--halfMargin);
    }
}

#NumberDisp_Verbose_Container {
    @include fill();

    display: flex;
    justify-content: center;
    align-items: center;

    z-index: 50;
    pointer-events: none;

    .numberDispGrid {
        display: grid;
        grid-template-columns: 1fr 2fr;

        div {
            padding: 0 scaled(16);

            font-size: calc(var(--fontSizeParagraph) * 0.75);

            background-color: var(--color-black-op20);

            &:nth-child(4n+1),
            &:nth-child(4n+2) {
                background-color: var(--color-black-op30);
            }
        }
    }
}

#NumberDisp_Simple_Container,
#NumberDisp_Verbose_Container {
    display: none;
}

#NumberDisp_Simple_Container {
    @include numberDisplayType("simple") {
        display: inline;
    }
}
#NumberDisp_Verbose_Container {
    @include numberDisplayType("verbose") {
        display: flex;
    }
}


#StickPanel {
    > * {
        position: absolute;
        width: var(--rightWidgetWidth);
        height: var(--topWidgetHeight);
    }

    #NumberDisp_Simple_Container {
        > * {
            position: absolute;
        }
    }
}

#NumberDisp_Simple_Container {
    opacity: 0.8;

    .bg {
        .name {
            fill: white;
        }
        .primary {
            fill: #3E3E3E;
        }
        .secondary {
            fill: #818181;
        }
        .aileronTip {
            fill: #DA0000;
        }
        .elevatorTip {
            fill: #00C200;
        }
        .rudderTip {
            fill: #0000C2;
        }
        .brakeTip {
            fill: #EEB000;
        }
        .propellerPrimary {
            fill: #004DC7;
            @include forHelicopter() {
                fill: #818181;
            }
        }
        .mixturePrimary {
            fill: #B1352A;
        }
    }
    .label {
        text {
            font-size: 7px;
            text-anchor: middle;
            dominant-baseline: central;
        }
        .name {
            font-weight: 800;
            fill: rgba(0, 0, 0, 0.7);
        }
        .numberDisp {
            fill: white;
            &.zero {
                fill: rgba(255, 255, 255, 0.5);
            }
        }
    }

    .throttleContainer {
        > g {
            display: none;
        }
    }
    @include throttlePanelMode("SingleEngine") {
        .throttle1Container {
            display: inline;
        }
    }
    @include throttlePanelMode("TwinEngine") {
        .throttle1Container,
        .throttle2Container {
            display: inline;
        }
    }
    @include throttlePanelMode("ThreeEngine") {
        .throttle1Container,
        .throttle2Container,
        .throttle3Container {
            display: inline;
        }
    }
    @include throttlePanelMode("FourEngine") {
        .throttle1Container,
        .throttle2Container,
        .throttle3Container,
        .throttle4Container {
            display: inline;
        }
    }
    @include throttlePanelMode("PropMix") {
        .throttle1Container,
        .propeller1Container,
        .mixture1Container {
            display: inline;
        }
    }
}

toggle-button.togglePropMix {
    @function handleOffset($factor) {
        // More factor, more left
        @return var(--leftPos, #{scaled(72 - 12 * $factor - 4)});
    }

    icon-element {
        position: absolute;

        top: scaled(2);
        width: scaled(48);
        height: scaled(48);

        transition: basic-transition(left, opacity);

        &#PropellerIcon {
            left: handleOffset(1.15);  // Add 0.15 to move it to left slightly
        }
        &#MixtureIcon {
            left: handleOffset(0);
        }
    }

    .ToggleButton .toggleButtonWrapper .toggleButton .state {
        left: handleOffset(2);
        transition: basic-transition(left, background-color);
    }

    &:not(.off) {
        .ToggleButton .toggleButtonWrapper .toggleButton .state {
            background-color: #4F4F4F;
        }
    }

    &.off {
        icon-element {
            opacity: 0;
        }
    }
}

#MiscPanel {
    display: flex;
    justify-content: center;
    align-items: center;

    #OpenConfig {
        // Default = scaled(60)
        --width: #{scaled(90)};
        --height: #{scaled(60)};
    }
}

#PanelGrid {
    .grad1, .grad2, .grad3 {
        fill: none;
        stroke: var(--primaryColor);
    }
    .grad1 {
        stroke-width: 3;
    }
    .grad2 {
        stroke-width: 1;
    }
    .grad3 {
        stroke-width: 1;
        opacity: 0.5;
    }

    .inputPos {
        fill: none;
        stroke: white;
        stroke-width: 3;
    }
    .trimPos {
        stroke: white;
        stroke-width: 1;
    }

    #RudderPanel {
        .wheelBrakeBar {
            .fg {
                fill: orange;
            }
            .cap {
                stroke: var(--primaryColor);
                stroke-width: 1;
            }
        }
    }

    #ThrottlePanel {
        .throttleBar {
            .fg {
                fill: white;
            }
            .cap {
                stroke: var(--primaryColor);
                stroke-width: 0.5;  // Compensates x2 scaling in y-axis
            }

            &.propeller {
                .fg {
                    fill: skyblue;
                    @include forHelicopter() {
                        fill: #DDDDDD;
                    }
                }
            }
            &.mixture {
                .fg {
                    fill: salmon;
                }
            }
        }

        #ThrottleBars,
        #ThrottleBordersV,
        #ThrottleBordersH {
            & > * {
                display: none;
            }
        }

        @mixin showThrottleBars($n, $is-prop-mixture: false) {
            // Translate
            #ThrottleBars,
            #ThrottleBordersV {
                transform: translate($n * -5px, 0);
            }

            // Toggle visibility
            @for $i from 1 through $n {
                @if $is-prop-mixture {
                    @if $i == 1 {
                        #ThrottleBar_#{$i},
                        #PropellerBar_#{$i},
                        #MixtureBar_#{$i} {
                            display: inline;
                        }
                    }
                } @else {
                    #ThrottleBar_#{$i} {
                        display: inline;
                    }
                }

                #ThrottleBordersV > *:nth-child(#{$i}) {
                    display: inline;
                }
            }
            #ThrottleBordersV > *:nth-child(#{$n + 1}) {
                display: inline;
            }
            #ThrottleBordersH > *:nth-child(#{$n}) {
                display: inline;
            }
        }

        @include throttlePanelMode("SingleEngine") {
            @include showThrottleBars(1);
        }
        @include throttlePanelMode("TwinEngine") {
            @include showThrottleBars(2);
        }
        @include throttlePanelMode("ThreeEngine") {
            @include showThrottleBars(3);
        }
        @include throttlePanelMode("FourEngine") {
            @include showThrottleBars(4);
        }
        @include throttlePanelMode("PropMix") {
            @include showThrottleBars(3, true);
        }
    }
}
